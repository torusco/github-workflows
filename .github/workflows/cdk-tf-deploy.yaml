name: "CDK TF Deploy v4"
# add integration testing

on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
        required: true

      CDK_FOLDER_NAME:
        description: "use this folder with lerna monorepos that contain a cdk- folder, otherwise use YARN_FOLDER_NAME and set this to ."
        type: string
        required: true

      CDK_PREFIX:
        description: environment instance name is used to select the environment gate and to deploy CDK and Terraform code
        type: string
        required: true

      ENVIRONMENT_LONG_NAME:
        type: string
        required: true

      SAML_AWS_ROLE_ARN:
        type: string
        required: true

      SLACK_CHANNEL_ID:
        type: string
        required: false

      RUN_INTEGRATION_TESTS:
        type: boolean
        required: false
        default: false
        description: "should integration tests be run on this environment?  typically false for preprod/production and true everywhere else"

      TARGET_AWS_ACCOUNT_ROLE_ARN:
        type: string
        required: true

      TARGET_TERRAFORM_FOLDER_NAME:
        type: string
        required: true

      YARN_FOLDER_NAME:
        description: "use this folder repos that contain a series of cdk- folders but no parent and yarn needs to run within the cdk- folder not the root"
        type: string
        required: false
        default: "."

      # put uses flags at end
      USES_CLOUDFLARE:
        type: boolean
        required: false
        default: false

      USES_STRIPE:
        type: boolean
        required: false
        default: false

    secrets:
      # only required if using cloudflare provider
      CLOUDFLARE_API_TOKEN: 
        required: false

      # only required if using stripe provider
      STRIPE_API_KEY: 
        required: false

      # only required if using slack provider
      SLACK_BOT_TOKEN:
        required: false

jobs:

  environment_gate:
    runs-on: ubuntu-latest
    environment: ${{ inputs.CDK_PREFIX }}
    steps:
      - run: echo "environment gate"

  cdk_deploy:

    needs: environment_gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: saml-to/assume-aws-role@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          role: ${{ inputs.SAML_AWS_ROLE_ARN }}
          region: ${{ inputs.AWS_REGION }}
          provider: awsProduction

      # this registry to be replaced with github packages
      - name: Yarn Registry
        env:
          CODE_ARTIFACT_ACCOUNT: 746354538204
          CODE_ARTIFACT_REGION: us-east-2
          CODE_ARTIFACT_URL: https://prod-yarn-746354538204.d.codeartifact.us-east-2.amazonaws.com/npm/prod-torus-common/
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}

          # still call this even though using role?
          aws codeartifact login --tool npm --repository prod-torus-common --domain prod-yarn --domain-owner ${{ env.CODE_ARTIFACT_ACCOUNT }} --region ${{ env.CODE_ARTIFACT_REGION }}

          # setup yarn per https://docs.aws.amazon.com/codeartifact/latest/ug/npm-yarn.html
          yarn config set npmRegistryServer "${{ env.CODE_ARTIFACT_URL }}"

          # get token
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain prod-yarn --domain-owner ${{ env.CODE_ARTIFACT_ACCOUNT }} --query authorizationToken --region ${{ env.CODE_ARTIFACT_REGION }} --output text` 

          # still required for auth
          echo "always-auth=true" >> ~/.npmrc

          echo "yarn config!"

          # test
          yarn config list

      - name: Yarn Install
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}
          yarn install

      - name: Yarn Build
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}
          yarn build

      - name: CDK_PREFIX
        run: |
          echo "CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV

      - name: Deployer Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.TARGET_AWS_ACCOUNT_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Slack CDK Start
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : "CDK Deploy Starting: ${{ inputs.CDK_FOLDER_NAME }} to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: CDK Deploy
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}
          yarn pipeline:deploy

      - name: Slack CDK Complete
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : "CDK Deploy Complete: ${{ inputs.CDK_FOLDER_NAME }} to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  terraform_apply:

    needs: cdk_deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: saml-to/assume-aws-role@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          role: ${{ inputs.SAML_AWS_ROLE_ARN }}
          region: ${{ inputs.AWS_REGION }}
          provider: awsProduction

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.TARGET_AWS_ACCOUNT_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Environment Variables
        run: |
          echo "CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_TORUS_ENVIRONMENT=${{ inputs.ENVIRONMENT_LONG_NAME }}" >> $GITHUB_ENV

      - name: CloudFlare Variables
        if: "${{ inputs.USES_CLOUDFLARE != '' }}"
        run: |
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV

      - name: Stripe Variables
        if: "${{ inputs.USES_STRIPE != '' }}"
        run: |
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          cd ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }}
          terraform --version
          terraform init -input=false -backend-config=./${{ env.TF_VAR_TORUS_ENVIRONMENT }}/$CDK_PREFIX.tf -reconfigure
          terraform workspace select $CDK_PREFIX || terraform workspace new -state="./.terraform/terraform.tfstate" $CDK_PREFIX

      - name: Slack Terraform Start
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : "Terraform Plan Starting: ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }} to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Terraform Plan and Apply
        run: |
          cd ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }}
          terraform plan -var-file=./${{ inputs.ENVIRONMENT_LONG_NAME }}/.tfvars -input=false -compact-warnings -refresh-only
          terraform plan -var-file=./${{ inputs.ENVIRONMENT_LONG_NAME }}/.tfvars -out=${{ inputs.ENVIRONMENT_LONG_NAME }}.out
          terraform apply ${{ inputs.ENVIRONMENT_LONG_NAME }}.out 

      - name: Slack Terraform Complete
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : "Terraform Apply Complete: ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }} applied to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  integration_test:

    needs: terraform_apply
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: saml-to/assume-aws-role@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          role: ${{ inputs.SAML_AWS_ROLE_ARN }}
          region: ${{ inputs.AWS_REGION }}
          provider: awsProduction

      # this registry to be replaced with github packages
      - name: Yarn Registry
        env:
          CODE_ARTIFACT_ACCOUNT: 746354538204
          CODE_ARTIFACT_REGION: us-east-2
          CODE_ARTIFACT_URL: https://prod-yarn-746354538204.d.codeartifact.us-east-2.amazonaws.com/npm/prod-torus-common/
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}

          # still call this even though using role?
          aws codeartifact login --tool npm --repository prod-torus-common --domain prod-yarn --domain-owner ${{ env.CODE_ARTIFACT_ACCOUNT }} --region ${{ env.CODE_ARTIFACT_REGION }}

          # setup yarn per https://docs.aws.amazon.com/codeartifact/latest/ug/npm-yarn.html
          yarn config set npmRegistryServer "${{ env.CODE_ARTIFACT_URL }}"

          # get token
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain prod-yarn --domain-owner ${{ env.CODE_ARTIFACT_ACCOUNT }} --query authorizationToken --region ${{ env.CODE_ARTIFACT_REGION }} --output text` 

          # still required for auth
          echo "always-auth=true" >> ~/.npmrc

          echo "yarn config!"

          # test
          yarn config list

      - name: Yarn Install
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}
          yarn install

      - name: Yarn Build
        run: |
          cd ${{ inputs.YARN_FOLDER_NAME }}
          yarn build

      - name: CDK_PREFIX
        run: |
          echo "CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV

      - name: Deployer Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.TARGET_AWS_ACCOUNT_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Run Integration tests
        if: "${{ inputs.RUN_INTEGRATION_TESTS != '' }}"
        run: |
          yarn pipeline:test-int

      - name: Slack Integration Test Complete
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }} && ${{ inputs.RUN_INTEGRATION_TESTS != '' }}"
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : "Integration Test Complete: vars here... ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
