name: "Python Run v8"

on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
        required: true

      CDK_PREFIX:
        description: environment instance name is used to select the environment gate and to deploy code
        type: string
        required: true

      ENVIRONMENT_LONG_NAME:
        type: string
        required: true

      PY_FOLDER_NAME:
        description: "use this folder py- folder that contains the script, requirements.txt, and other files"
        type: string
        required: true

      PY_VERSION:
        description: "the python version to install, ex 3.10 or 3.11"
        type: string
        required: true
  
      RUNS_ON:
        type: string
        required: true
        default: ubuntu-latest

      SLACK_CHANNEL_ID:
        type: string
        required: false

      TARGET_AWS_ACCOUNT_ROLE_ARN:
        type: string
        required: true

      PY_RUN_COMMAND:
        type: string
        required: true

      # put uses flags at end
      USES_CLOUDFLARE:
        type: boolean
        required: false
        default: false

      USES_FIVETRAN:
        type: boolean
        required: false
        default: false
  
      USES_METABASE:
        type: boolean
        required: false
        default: false

      USES_PIP:
        type: boolean
        required: false
        default: true
    
      USES_POETRY:
        type: boolean
        required: false
        default: false
    
      USES_STRIPE:
        type: boolean
        required: false
        default: false

    secrets:
      # only required if using cloudflare provider
      CLOUDFLARE_API_TOKEN: 
        required: false

      # only required if using fivetran provider
      FIVETRAN_APIKEY: 
        required: false

      # only required if using fivetran provider
      FIVETRAN_APISECRET: 
        required: false

      # only required if using metabase provider
      METABASE_USER: 
        required: false

      # only required if using metabase provider
      METABASE_PASS: 
        required: false

      # only required if using stripe provider
      STRIPE_API_KEY: 
        required: false

      # only required if using slack provider
      SLACK_BOT_TOKEN:
        required: false

      # required for GITHUB checkout / NPM_TOKEN on other workflows
      CHECKOUT_TOKEN:
        required: true

jobs:

  python_run:

    runs-on: ${{ inputs.RUNS_ON }}

    permissions: # github oidc
      id-token: write
      contents: read

    steps:

      - name: echo
        run: |
          echo PY_FOLDER_NAME ${{ inputs.PY_FOLDER_NAME }}
          echo TARGET_AWS_ACCOUNT_ROLE_ARN ${{ inputs.TARGET_AWS_ACCOUNT_ROLE_ARN }}
          echo AWS_REGION ${{ inputs.AWS_REGION }}
          echo "GITHUB_RUN_URL_FOR_SLACK=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV

      - if: github.event.client_payload.ref != ''
        name: GITHUB_CHECKOUT_REF
        run: |
          echo "use ${{ github.event.client_payload.ref }} not ${{ github.ref }}"
          echo "GITHUB_CHECKOUT_REF=${{ github.event.client_payload.ref_name }}" >> $GITHUB_ENV
          echo "GITHUB_VERSION_URL_FOR_SLACK=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ github.event.client_payload.ref_name }}" >> $GITHUB_ENV

      - if: github.event.client_payload.ref != ''
        name: actions/checkout@v3 client payload ref
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CHECKOUT_TOKEN }} # matches github-torus-packages - repo, packages
          ref: ${{ github.event.client_payload.ref }}

      - if: github.event.client_payload.ref == ''
        name: GITHUB_CHECKOUT_REF
        run: |
          echo "use default ${{ github.ref }}"
          echo "GITHUB_CHECKOUT_REF=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "GITHUB_VERSION_URL_FOR_SLACK=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ github.ref_name }}" >> $GITHUB_ENV

      - if: github.event.client_payload.ref == ''
        name: actions/checkout@v3 default ref
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CHECKOUT_TOKEN }} # matches github-torus-packages - repo, packages

      - name: Set up Python ${{ inputs.PY_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.PY_VERSION }}
            
      - name: pip install
        if: "${{ inputs.USES_PIP != '' }}"
        run: |
            cd ${{ inputs.PY_FOLDER_NAME }}
            pip install -r requirements.txt

      - name: install poetry
        if: "${{ inputs.USES_POETRY != '' }}"
        uses: snok/install-poetry@v1
    
      - name: poetry install
        if: "${{ inputs.USES_POETRY != '' }}"
        run: |
            cd ${{ inputs.PY_FOLDER_NAME }}
            poetry install
    
      - name: ENV VARS
        run: |
          echo "CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV
          echo "ENVIRONMENT_LONG_NAME=${{ inputs.ENVIRONMENT_LONG_NAME }}" >> $GITHUB_ENV

      - name: Deployer Role with Github OIDC Provider
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{inputs.TARGET_AWS_ACCOUNT_ROLE_ARN}}
            aws-region: ${{inputs.AWS_REGION}}

      - name: CloudFlare Variables
        if: "${{ inputs.USES_CLOUDFLARE != '' }}"
        run: |
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
  
      - name: Fivetran Variables
        if: "${{ inputs.USES_FIVETRAN != '' }}"
        run: |
          echo "FIVETRAN_APIKEY=${{ secrets.FIVETRAN_APIKEY }}" >> $GITHUB_ENV
          echo "FIVETRAN_APISECRET=${{ secrets.FIVETRAN_APISECRET }}" >> $GITHUB_ENV
  
      - name: Metabase Variables
        if: "${{ inputs.USES_METABASE != '' }}"
        run: |
          echo "METABASE_USER=${{ secrets.METABASE_USER }}" >> $GITHUB_ENV
          echo "METABASE_PASS=${{ secrets.METABASE_PASS }}" >> $GITHUB_ENV

      - name: Stripe Variables
        if: "${{ inputs.USES_STRIPE != '' }}"
        run: |
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> $GITHUB_ENV
  
      - name: Slack PY Start
        id: slack
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : ":large_yellow_circle: :python: Running! :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.PY_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Python Run
        run: |
          cd ${{ inputs.PY_FOLDER_NAME }}
          ${{ inputs.PY_RUN_COMMAND }}
          
      - name: Slack PY Complete
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text" : ":check-passed: :python: :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.PY_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> deployed to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack PY Failure
        if: "${{ failure() && inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text" : ":check-failed: :python: :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.PY_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> not deployed to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Python Cancelled
        if: "${{ cancelled() && inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text" : ":black_square_for_stop: :python: :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.PY_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> cancelled deploy to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
