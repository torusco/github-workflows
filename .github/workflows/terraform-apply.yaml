name: "Terraform Apply  v8"

on:
  workflow_call:
    inputs:
      AWS_REGION:
        type: string
        required: true

      CDK_PREFIX:
        type: string
        required: true

      ENVIRONMENT_LONG_NAME:
        type: string
        required: true

      PIP_INSTALL_REQUIREMENTS_FILE:
        type: string
        required: false
        description: "if included, the action will run pip3 install for the provided requirements files"

      RUNS_ON:
        type: string
        required: false
        default: ubuntu-latest

      SLACK_CHANNEL_ID:
        type: string
        required: false

      TARGET_AWS_ACCOUNT_ROLE_ARN:
        type: string
        required: true

      TARGET_TERRAFORM_FOLDER_NAME:
        type: string
        required: true

      TERRAFORM_RESOURCE_TO_REPLACE:
        type: string
        required: false
        description: "fully qualified resource name to force replace, if needed, after normal terraform run"

      TERRAFORM_VAR_FILE:
        type: string
        required: true
        description: "most var files are just -var-file=./<env long name>/.tfvars but some use instance specific variables such as -var-file=./<env long name>/<cdk prefix>.tfvars"

      USES_CLOUDFLARE:
        type: boolean
        required: false
        default: false

      USES_DATADOG:
        type: boolean
        required: false
        default: false

      USES_FIVETRAN:
        type: boolean
        required: false
        default: false

      USES_OKTA:
        type: boolean
        required: false
        default: false

      USES_STRIPE:
        type: boolean
        required: false
        default: false

    secrets:
      # only required if using cloudflare provider
      CLOUDFLARE_API_TOKEN: 
        required: false

      # only required if using datadog provider
      DD_API_KEY: 
        required: false

      # only required if using datadog provider
      DD_APP_KEY: 
        required: false

      # only required if using fivetran provider
      FIVETRAN_APIKEY: 
        required: false

      # only required if using fivetran provider
      FIVETRAN_APISECRET: 
        required: false

      # only required if using okta provider
      OKTA_API_TOKEN: 
        required: false

      # only required if using stripe provider
      STRIPE_API_KEY: 
        required: false

      # only required if using slack provider
      SLACK_BOT_TOKEN:
        required: false

env:
  TERRAFORM_VERSION: "1.6.4"

jobs:

  terraform:

    runs-on: ${{ inputs.RUNS_ON }}

    permissions: # github oidc
      id-token: write
      contents: read

    steps:
      - name: echo
        run: |
          echo TARGET_TERRAFORM_FOLDER_NAME ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }}
          echo TARGET_AWS_ACCOUNT_ROLE_ARN ${{ inputs.TARGET_AWS_ACCOUNT_ROLE_ARN }}
          echo AWS_REGION ${{ inputs.AWS_REGION }}
          echo "GITHUB_RUN_URL_FOR_SLACK=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV
          echo "SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}" >> $GITHUB_ENV  # was this debug or because slack was being weird in this file?

      - if: github.event.client_payload.ref != ''
        name: GITHUB_CHECKOUT_REF
        run: |
          echo "use ${{ github.event.client_payload.ref }} not ${{ github.ref }}"
          echo "GITHUB_CHECKOUT_REF=${{ github.event.client_payload.ref_name }}" >> $GITHUB_ENV
          echo "GITHUB_VERSION_URL_FOR_SLACK=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ github.event.client_payload.ref_name }}" >> $GITHUB_ENV

      - if: github.event.client_payload.ref != ''
        name: actions/checkout@v3 client payload ref
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.ref }}

      - if: github.event.client_payload.ref == ''
        name: GITHUB_CHECKOUT_REF
        run: |
          echo "use default ${{ github.ref }}"
          echo "GITHUB_CHECKOUT_REF=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "GITHUB_VERSION_URL_FOR_SLACK=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/tag/${{ github.ref_name }}" >> $GITHUB_ENV

      - if: github.event.client_payload.ref == ''
        name: actions/checkout@v3 default ref
        uses: actions/checkout@v3

      - if: inputs.PIP_INSTALL_REQUIREMENTS_FILE != ''
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'       
          cache: 'pip' # caching pip dependencies

      - if: inputs.PIP_INSTALL_REQUIREMENTS_FILE != ''
        name: Pip3 Install
        run: pip3 install -r ${{ inputs.PIP_INSTALL_REQUIREMENTS_FILE }}
          
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ inputs.TARGET_AWS_ACCOUNT_ROLE_ARN }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Environment Variables
        run: |
          echo "CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_CDK_PREFIX=${{ inputs.CDK_PREFIX }}" >> $GITHUB_ENV
          echo "TF_VAR_TORUS_ENVIRONMENT=${{ inputs.ENVIRONMENT_LONG_NAME }}" >> $GITHUB_ENV

      - name: CloudFlare Variables
        if: "${{ inputs.USES_CLOUDFLARE != '' }}"
        run: |
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV

      - name: Datadog Variables
        if: "${{ inputs.USES_DATADOG != '' }}"
        run: |
          echo "DD_API_KEY=${{ secrets.DD_API_KEY }}" >> $GITHUB_ENV
          echo "DD_APP_KEY=${{ secrets.DD_APP_KEY }}" >> $GITHUB_ENV
  
      - name: Fivetran Variables
        if: "${{ inputs.USES_FIVETRAN != '' }}"
        run: |
          echo "FIVETRAN_APIKEY=${{ secrets.FIVETRAN_APIKEY }}" >> $GITHUB_ENV
          echo "FIVETRAN_APISECRET=${{ secrets.FIVETRAN_APISECRET }}" >> $GITHUB_ENV

      - name: Okta Variables
        if: "${{ inputs.USES_OKTA != '' }}"
        run: |
          echo "OKTA_API_TOKEN=${{ secrets.OKTA_API_TOKEN }}" >> $GITHUB_ENV

      - name: Stripe Variables
        if: "${{ inputs.USES_STRIPE != '' }}"
        run: |
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> $GITHUB_ENV

      - name: Slack Terraform Start
        id: slack
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text" : ":large_yellow_circle: :terraform: Terraforming! :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> to ${{ env.TF_VAR_TORUS_ENVIRONMENT }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Terraform Init
        run: |
          cd ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }}
          terraform --version
          terraform init -input=false -backend-config=./${{ env.TF_VAR_TORUS_ENVIRONMENT }}/$CDK_PREFIX.tf -reconfigure
          terraform workspace select -or-create $CDK_PREFIX 

      - name: Terraform Plan and Apply
        run: |
          cd ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }}
          terraform plan -var-file=${{ inputs.TERRAFORM_VAR_FILE }} -out=${{ inputs.ENVIRONMENT_LONG_NAME }}.out
          terraform apply ${{ inputs.ENVIRONMENT_LONG_NAME }}.out 

      - name: Terraform Resource Plan and Apply
        if: "${{ inputs.TERRAFORM_RESOURCE_TO_REPLACE != '' }}"
        run: |
          cd ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }}
          terraform plan -replace=${{ inputs.TERRAFORM_RESOURCE_TO_REPLACE }} -var-file=${{ inputs.TERRAFORM_VAR_FILE }} -out=${{ inputs.ENVIRONMENT_LONG_NAME }}.out
          terraform apply -replace=${{ inputs.TERRAFORM_RESOURCE_TO_REPLACE }} ${{ inputs.ENVIRONMENT_LONG_NAME }}.out 

      - name: Slack Terraform Complete
        if: "${{ inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text" : ":check-passed: :terraform: :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> applied to ${{ env.TF_VAR_TORUS_ENVIRONMENT }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Terraform Failure
        if: "${{ failure() && inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text" : ":check-failed: :terraform: :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> not applied to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Terraform Cancelled
        if: "${{ cancelled() && inputs.SLACK_CHANNEL_ID != '' }}"
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text" : ":black_square_for_stop: :terraform: :${{ github.event.repository.name }}: ${{ github.event.repository.name }} ${{ inputs.TARGET_TERRAFORM_FOLDER_NAME }} <${{ env.GITHUB_VERSION_URL_FOR_SLACK }}|${{ env.GITHUB_CHECKOUT_REF }}> cancelled to ${{ inputs.ENVIRONMENT_LONG_NAME }} ${{ inputs.CDK_PREFIX }} <${{ env.GITHUB_RUN_URL_FOR_SLACK }}|Action> "
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}          
